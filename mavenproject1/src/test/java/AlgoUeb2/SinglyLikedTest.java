package AlgoUeb2;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import AlgoUeb2.lists.DoublyLinkedList;
import AlgoUeb2.lists.Listable;
import AlgoUeb2.lists.SinglyLinkedList;
import AlgoUeb2.util.Course;
import AlgoUeb2.util.Student;
import com.mycompany.mavenproject1.Course;
import com.mycompany.mavenproject1.Listable;
import com.mycompany.mavenproject1.SinglyLinkedList;
import com.mycompany.mavenproject1.Student;
import org.junit.Assert;
import org.junit.Test;
import org.junit.jupiter.api.Test;

public class SinglyLikedTest {

    private static final Student student1 = new Student("Mark", "Something", Course.B1, 7373);
    private static final Student student2 = new Student("Carl", "SomethingElse", Course.B2, 3737);
    private static final Student student3 = new Student("Huseyin", "SomethingNew", Course.B3, 2937);
    private static final Student student4 = new Student("Melisa", "Urgh", Course.B4, 2873);

    @Test
    public void goodAddFirstAndGetTest() {
        Listable<Student> test = new SinglyLinkedList<>();

        Assert.assertNull(test.get(0));
        test.addFirst(student1);
        Assert.assertEquals(student1, test.get(0));
        test.addFirst(student2);
        Assert.assertEquals(student2, test.get(0));
        test.addFirst(student3);
        Assert.assertEquals(student3, test.get(0));
        Assert.assertEquals(student2, test.get(1));
        Assert.assertEquals(student1, test.get(2));
    }

    @Test
    public void badAddFirstAndGetTest() {
        Listable<Student> test = new SinglyLinkedList<>();

        test.addFirst(student1);
        Assert.assertNotNull(test.get(0));
        test.addFirst(student2);
        Assert.assertNotEquals(student1, test.get(0));
        test.addFirst(student3);
        Assert.assertNotEquals(student1, test.get(0));
        Assert.assertNotEquals(student2, test.get(0));
    }

    @Test
    public void goodAddLastTest() {
        Listable<Student> test = new SinglyLinkedList<>();

        test.addLast(student1);
        Assert.assertEquals(student1, test.get(0));
        test.addLast(student2);
        Assert.assertEquals(student1, test.get(0));
        Assert.assertEquals(student2, test.get(1));
    }

    @Test
    public void badAddLastTest() {
        Listable<Student> test = new SinglyLinkedList<>();

        test.addLast(student1);
        Assert.assertNotNull(test.get(0));
        test.addLast(student2);
        test.addLast(student3);
        Assert.assertNotEquals(student1, test.get(2));
        Assert.assertNotEquals(student2, test.get(0));
        Assert.assertNotEquals(student3, test.get(1));
    }

    @Test
    public void goodRemoveTest() throws Exception {
        Listable<Student> test = new SinglyLinkedList<>();

        test.add(student1);
        test.add(student2);
        test.add(student3);
        test.remove(0);
        Assert.assertEquals(student2, test.get(0));
    }

    @Test
    public void goodRemoveTest2() throws Exception {
        Listable<Student> test = new SinglyLinkedList<>();

        test.addLast(student1);
        test.remove(0);
        Assert.assertNull(test.get(0));
    }

    @Test(expected = Exception.class)
    public void badRemoveTest() throws Exception {
        Listable<Student> test = new SinglyLinkedList<>();

        test.remove(1);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void badRemoveTest2() throws Exception {
        Listable<Student> test = new SinglyLinkedList<>();

        test.addLast(student3);
        test.remove(1);
    }

    @Test
    public void goodAddAtIndexTest() {
        Listable<Student> test = new SinglyLinkedList<>();

        test.add(student1);
        test.add(student3);
        test.add(1, student2);
        Assert.assertEquals(student1, test.get(0));
        Assert.assertEquals(student2, test.get(1));
        Assert.assertEquals(student3, test.get(2));

        test.add(2, student4);
        Assert.assertEquals(student1, test.get(0));
        Assert.assertEquals(student2, test.get(1));
        Assert.assertEquals(student4, test.get(2));
        Assert.assertEquals(student3, test.get(3));

        test.clear();
        test.add(student2);
        test.add(0, student1);
        Assert.assertEquals(student1, test.get(0));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void badAddAtIndexTest() {
        Listable<Student> test = new SinglyLinkedList<>();

        test.add(student1);
        test.add(1, student2);
    }


}
